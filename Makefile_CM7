# Define the target name for CM7 core
TARGET_CM7 = STM32H747XI_CM7

# Define the linker script location and chip architecture
LD_SCRIPT_CM7 = CM7/Linker_STM32H747XI_CM7.ld
MCU_SPEC_M7 = cortex-m7

# Define directories for CM7 and common files
CM7_DIR = CM7
COMMON_DIR = drivers

# Find all source, header, and assembly files in the specified directories
C_SOURCES_CM7 = $(shell find $(CM7_DIR) $(COMMON_DIR) -name "*.c")
ASM_SOURCES_CM7 = $(shell find $(CM7_DIR) $(COMMON_DIR) -name "*.s")
HEADERS_CM7 = $(shell find $(CM7_DIR) $(COMMON_DIR) -name "*.h")

# Define the build directory for CM7
BUILD_DIR_CM7 = _out/CM7

# ARM Toolchain definitions
CC = arm-none-eabi-gcc
AS = arm-none-eabi-as
LD = arm-none-eabi-ld
OC = arm-none-eabi-objcopy
OD = arm-none-eabi-objdump
OS = arm-none-eabi-size
DB = arm-none-eabi-gdb

# Assembly directives
ASFLAGS_CM7 += -c
ASFLAGS_CM7 += -O0
ASFLAGS_CM7 += -mcpu=$(MCU_SPEC_M7)
ASFLAGS_CM7 += -mthumb
ASFLAGS_CM7 += -Wall
ASFLAGS_CM7 += -fmessage-length=0

# C compilation directives
CFLAGS_CM7 += -mcpu=$(MCU_SPEC_M7)
CFLAGS_CM7 += -mthumb
CFLAGS_CM7 += -Wall
CFLAGS_CM7 += -g
CFLAGS_CM7 += -fmessage-length=0
CFLAGS_CM7 += --specs=nosys.specs

# Linker directives
LSCRIPT_CM7 = ./$(LD_SCRIPT_CM7)
LFLAGS_CM7 += -mcpu=$(MCU_SPEC_M7)
LFLAGS_CM7 += -mthumb
LFLAGS_CM7 += -Wall
LFLAGS_CM7 += --specs=nosys.specs
LFLAGS_CM7 += -nostdlib
LFLAGS_CM7 += -lgcc
LFLAGS_CM7 += -T$(LSCRIPT_CM7)

# Include paths for header files
INCLUDES_CM7 = $(sort $(foreach dir,$(dir $(HEADERS_CM7)),-I$(dir)))

# Define object files for assembly and C sources
OBJECTS_CM7 = $(addprefix $(BUILD_DIR_CM7)/,$(notdir $(ASM_SOURCES_CM7:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES_CM7)))

OBJECTS_CM7 += $(addprefix $(BUILD_DIR_CM7)/,$(notdir $(C_SOURCES_CM7:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES_CM7)))

# Rule to compile assembly files
$(BUILD_DIR_CM7)/%.o: %.s | $(BUILD_DIR_CM7)
	$(CC) -x assembler-with-cpp $(ASFLAGS_CM7) $< -o $@

# Rule to compile C files
$(BUILD_DIR_CM7)/%.o: %.c | $(BUILD_DIR_CM7)
	$(CC) -c $(CFLAGS_CM7) $(INCLUDES_CM7) $< -o $@

# Rule to link object files into an ELF binary
$(BUILD_DIR_CM7)/$(TARGET_CM7).elf: $(OBJECTS_CM7) | $(BUILD_DIR_CM7)
	$(CC) $^ $(LFLAGS_CM7) -o $@

# Rule to convert ELF binary to a bin file and show its size
$(BUILD_DIR_CM7)/%.bin: $(BUILD_DIR_CM7)/%.elf | $(BUILD_DIR_CM7)
	$(OC) -S -O binary $< $@
	$(OS) $<

# Create the build directory if it does not exist
$(BUILD_DIR_CM7):
	mkdir $@

# Phony targets for building and cleaning the project
.PHONY: CM7 clean
CM7: $(BUILD_DIR_CM7)/$(TARGET_CM7).bin

# Clean the build directory
clean:
	-rm -fr $(BUILD_DIR_CM7)
